// **********************************************************************
// Parsed By TarsParser(2.4.13), Generated By tools(20200627)
// TarsParser Maintained By <TARS> and tools Maintained By <superzheng>
// Generated from "api.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var apitars = apitars || {};
module.exports.apitars = apitars;

apitars.apiProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

apitars.apiProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

apitars.apiProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

apitars.apiProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

apitars.apiProxy.prototype.getVersion = function () {
    return this._worker.version;
};

apitars.RespCodeSucc = 0;

apitars.FuncTest = "func";

apitars.PerfTest = "perf";

apitars.SimpleResp = function() {
    this.code = 0;
    this.msg = "";
    this._classname = "apitars.SimpleResp";
};
apitars.SimpleResp._classname = "apitars.SimpleResp";
apitars.SimpleResp._write = function (os, tag, value) { os.writeStruct(tag, value); };
apitars.SimpleResp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
apitars.SimpleResp._readFrom = function (is) {
    var tmp = new apitars.SimpleResp;
    tmp.code = is.readUInt32(0, true, 0);
    tmp.msg = is.readString(1, true, "");
    return tmp;
};
apitars.SimpleResp.prototype._writeTo = function (os) {
    os.writeUInt32(0, this.code);
    os.writeString(1, this.msg);
};
apitars.SimpleResp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
apitars.SimpleResp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
apitars.SimpleResp.prototype.toObject = function() { 
    return {
        "code" : this.code,
        "msg" : this.msg
    };
};
apitars.SimpleResp.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "code") && (this.code = json.code);
    _hasOwnProperty.call(json, "msg") && (this.msg = json.msg);
    return this;
};
apitars.SimpleResp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
apitars.SimpleResp.new = function () {
    return new apitars.SimpleResp();
};
apitars.SimpleResp.create = function (is) {
    return apitars.SimpleResp._readFrom(is);
};

apitars.FuncTestDetail = function() {
    this.from = "";
    this.to = "";
    this.isSucc = true;
    this._classname = "apitars.FuncTestDetail";
};
apitars.FuncTestDetail._classname = "apitars.FuncTestDetail";
apitars.FuncTestDetail._write = function (os, tag, value) { os.writeStruct(tag, value); };
apitars.FuncTestDetail._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
apitars.FuncTestDetail._readFrom = function (is) {
    var tmp = new apitars.FuncTestDetail;
    tmp.from = is.readString(0, true, "");
    tmp.to = is.readString(1, true, "");
    tmp.isSucc = is.readBoolean(2, true, true);
    return tmp;
};
apitars.FuncTestDetail.prototype._writeTo = function (os) {
    os.writeString(0, this.from);
    os.writeString(1, this.to);
    os.writeBoolean(2, this.isSucc);
};
apitars.FuncTestDetail.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
apitars.FuncTestDetail.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
apitars.FuncTestDetail.prototype.toObject = function() { 
    return {
        "from" : this.from,
        "to" : this.to,
        "isSucc" : this.isSucc
    };
};
apitars.FuncTestDetail.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "from") && (this.from = json.from);
    _hasOwnProperty.call(json, "to") && (this.to = json.to);
    _hasOwnProperty.call(json, "isSucc") && (this.isSucc = json.isSucc);
    return this;
};
apitars.FuncTestDetail.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
apitars.FuncTestDetail.new = function () {
    return new apitars.FuncTestDetail();
};
apitars.FuncTestDetail.create = function (is) {
    return apitars.FuncTestDetail._readFrom(is);
};

apitars.FuncTestResp = function() {
    this.code = 0;
    this.msg = "";
    this.rows = new TarsStream.List(apitars.FuncTestDetail);
    this._classname = "apitars.FuncTestResp";
};
apitars.FuncTestResp._classname = "apitars.FuncTestResp";
apitars.FuncTestResp._write = function (os, tag, value) { os.writeStruct(tag, value); };
apitars.FuncTestResp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
apitars.FuncTestResp._readFrom = function (is) {
    var tmp = new apitars.FuncTestResp;
    tmp.code = is.readUInt32(0, true, 0);
    tmp.msg = is.readString(1, true, "");
    tmp.rows = is.readList(2, false, TarsStream.List(apitars.FuncTestDetail));
    return tmp;
};
apitars.FuncTestResp.prototype._writeTo = function (os) {
    os.writeUInt32(0, this.code);
    os.writeString(1, this.msg);
    os.writeList(2, this.rows);
};
apitars.FuncTestResp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
apitars.FuncTestResp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
apitars.FuncTestResp.prototype.toObject = function() { 
    return {
        "code" : this.code,
        "msg" : this.msg,
        "rows" : this.rows.toObject()
    };
};
apitars.FuncTestResp.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "code") && (this.code = json.code);
    _hasOwnProperty.call(json, "msg") && (this.msg = json.msg);
    _hasOwnProperty.call(json, "rows") && (this.rows.readFromObject(json.rows));
    return this;
};
apitars.FuncTestResp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
apitars.FuncTestResp.new = function () {
    return new apitars.FuncTestResp();
};
apitars.FuncTestResp.create = function (is) {
    return apitars.FuncTestResp._readFrom(is);
};

apitars.PerfTestReq = function() {
    this.lang = "";
    this.servType = "";
    this.threads = 0;
    this.cores = 0;
    this.connCnt = 0;
    this.reqFreq = 0;
    this.keepAlive = 0;
    this.pkgLen = 0;
    this._classname = "apitars.PerfTestReq";
};
apitars.PerfTestReq._classname = "apitars.PerfTestReq";
apitars.PerfTestReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
apitars.PerfTestReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
apitars.PerfTestReq._readFrom = function (is) {
    var tmp = new apitars.PerfTestReq;
    tmp.lang = is.readString(0, true, "");
    tmp.servType = is.readString(1, true, "");
    tmp.threads = is.readUInt32(2, true, 0);
    tmp.cores = is.readUInt32(3, true, 0);
    tmp.connCnt = is.readUInt32(4, true, 0);
    tmp.reqFreq = is.readUInt32(5, true, 0);
    tmp.keepAlive = is.readUInt32(6, true, 0);
    tmp.pkgLen = is.readUInt32(7, true, 0);
    return tmp;
};
apitars.PerfTestReq.prototype._writeTo = function (os) {
    os.writeString(0, this.lang);
    os.writeString(1, this.servType);
    os.writeUInt32(2, this.threads);
    os.writeUInt32(3, this.cores);
    os.writeUInt32(4, this.connCnt);
    os.writeUInt32(5, this.reqFreq);
    os.writeUInt32(6, this.keepAlive);
    os.writeUInt32(7, this.pkgLen);
};
apitars.PerfTestReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
apitars.PerfTestReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
apitars.PerfTestReq.prototype.toObject = function() { 
    return {
        "lang" : this.lang,
        "servType" : this.servType,
        "threads" : this.threads,
        "cores" : this.cores,
        "connCnt" : this.connCnt,
        "reqFreq" : this.reqFreq,
        "keepAlive" : this.keepAlive,
        "pkgLen" : this.pkgLen
    };
};
apitars.PerfTestReq.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "lang") && (this.lang = json.lang);
    _hasOwnProperty.call(json, "servType") && (this.servType = json.servType);
    _hasOwnProperty.call(json, "threads") && (this.threads = json.threads);
    _hasOwnProperty.call(json, "cores") && (this.cores = json.cores);
    _hasOwnProperty.call(json, "connCnt") && (this.connCnt = json.connCnt);
    _hasOwnProperty.call(json, "reqFreq") && (this.reqFreq = json.reqFreq);
    _hasOwnProperty.call(json, "keepAlive") && (this.keepAlive = json.keepAlive);
    _hasOwnProperty.call(json, "pkgLen") && (this.pkgLen = json.pkgLen);
    return this;
};
apitars.PerfTestReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
apitars.PerfTestReq.new = function () {
    return new apitars.PerfTestReq();
};
apitars.PerfTestReq.create = function (is) {
    return apitars.PerfTestReq._readFrom(is);
};

apitars.PerfTestResp = function() {
    this.code = 0;
    this.msg = "";
    this.testID = 0;
    this._classname = "apitars.PerfTestResp";
};
apitars.PerfTestResp._classname = "apitars.PerfTestResp";
apitars.PerfTestResp._write = function (os, tag, value) { os.writeStruct(tag, value); };
apitars.PerfTestResp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
apitars.PerfTestResp._readFrom = function (is) {
    var tmp = new apitars.PerfTestResp;
    tmp.code = is.readUInt32(0, true, 0);
    tmp.msg = is.readString(1, true, "");
    tmp.testID = is.readUInt32(2, true, 0);
    return tmp;
};
apitars.PerfTestResp.prototype._writeTo = function (os) {
    os.writeUInt32(0, this.code);
    os.writeString(1, this.msg);
    os.writeUInt32(2, this.testID);
};
apitars.PerfTestResp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
apitars.PerfTestResp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
apitars.PerfTestResp.prototype.toObject = function() { 
    return {
        "code" : this.code,
        "msg" : this.msg,
        "testID" : this.testID
    };
};
apitars.PerfTestResp.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "code") && (this.code = json.code);
    _hasOwnProperty.call(json, "msg") && (this.msg = json.msg);
    _hasOwnProperty.call(json, "testID") && (this.testID = json.testID);
    return this;
};
apitars.PerfTestResp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
apitars.PerfTestResp.new = function () {
    return new apitars.PerfTestResp();
};
apitars.PerfTestResp.create = function (is) {
    return apitars.PerfTestResp._readFrom(is);
};

apitars.PerfTestDetail = function() {
    this.timestamp = 0;
    this.qps = 0;
    this.totalReq = 0;
    this.succ = 0;
    this.failed = 0;
    this.succRate = "";
    this.costMax = 0;
    this.costMin = 0;
    this.costAvg = 0;
    this.p90 = 0;
    this.p99 = 0;
    this.p999 = 0;
    this.sendByte = 0;
    this.recvByte = 0;
    this.costMap = new TarsStream.Map(TarsStream.String, TarsStream.Int64);
    this.retCodeMap = new TarsStream.Map(TarsStream.String, TarsStream.Int64);
    this._classname = "apitars.PerfTestDetail";
};
apitars.PerfTestDetail._classname = "apitars.PerfTestDetail";
apitars.PerfTestDetail._write = function (os, tag, value) { os.writeStruct(tag, value); };
apitars.PerfTestDetail._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
apitars.PerfTestDetail._readFrom = function (is) {
    var tmp = new apitars.PerfTestDetail;
    tmp.timestamp = is.readUInt32(0, true, 0);
    tmp.qps = is.readUInt32(1, true, 0);
    tmp.totalReq = is.readUInt32(2, true, 0);
    tmp.succ = is.readUInt32(3, true, 0);
    tmp.failed = is.readUInt32(4, true, 0);
    tmp.succRate = is.readString(5, true, "");
    tmp.costMax = is.readFloat(6, true, 0);
    tmp.costMin = is.readFloat(7, true, 0);
    tmp.costAvg = is.readFloat(8, true, 0);
    tmp.p90 = is.readFloat(9, true, 0);
    tmp.p99 = is.readFloat(10, true, 0);
    tmp.p999 = is.readFloat(11, true, 0);
    tmp.sendByte = is.readUInt32(12, true, 0);
    tmp.recvByte = is.readUInt32(13, true, 0);
    tmp.costMap = is.readMap(14, true, TarsStream.Map(TarsStream.String, TarsStream.Int64));
    tmp.retCodeMap = is.readMap(15, true, TarsStream.Map(TarsStream.String, TarsStream.Int64));
    return tmp;
};
apitars.PerfTestDetail.prototype._writeTo = function (os) {
    os.writeUInt32(0, this.timestamp);
    os.writeUInt32(1, this.qps);
    os.writeUInt32(2, this.totalReq);
    os.writeUInt32(3, this.succ);
    os.writeUInt32(4, this.failed);
    os.writeString(5, this.succRate);
    os.writeFloat(6, this.costMax);
    os.writeFloat(7, this.costMin);
    os.writeFloat(8, this.costAvg);
    os.writeFloat(9, this.p90);
    os.writeFloat(10, this.p99);
    os.writeFloat(11, this.p999);
    os.writeUInt32(12, this.sendByte);
    os.writeUInt32(13, this.recvByte);
    os.writeMap(14, this.costMap);
    os.writeMap(15, this.retCodeMap);
};
apitars.PerfTestDetail.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
apitars.PerfTestDetail.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
apitars.PerfTestDetail.prototype.toObject = function() { 
    return {
        "timestamp" : this.timestamp,
        "qps" : this.qps,
        "totalReq" : this.totalReq,
        "succ" : this.succ,
        "failed" : this.failed,
        "succRate" : this.succRate,
        "costMax" : this.costMax,
        "costMin" : this.costMin,
        "costAvg" : this.costAvg,
        "p90" : this.p90,
        "p99" : this.p99,
        "p999" : this.p999,
        "sendByte" : this.sendByte,
        "recvByte" : this.recvByte,
        "costMap" : this.costMap.toObject(),
        "retCodeMap" : this.retCodeMap.toObject()
    };
};
apitars.PerfTestDetail.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "timestamp") && (this.timestamp = json.timestamp);
    _hasOwnProperty.call(json, "qps") && (this.qps = json.qps);
    _hasOwnProperty.call(json, "totalReq") && (this.totalReq = json.totalReq);
    _hasOwnProperty.call(json, "succ") && (this.succ = json.succ);
    _hasOwnProperty.call(json, "failed") && (this.failed = json.failed);
    _hasOwnProperty.call(json, "succRate") && (this.succRate = json.succRate);
    _hasOwnProperty.call(json, "costMax") && (this.costMax = json.costMax);
    _hasOwnProperty.call(json, "costMin") && (this.costMin = json.costMin);
    _hasOwnProperty.call(json, "costAvg") && (this.costAvg = json.costAvg);
    _hasOwnProperty.call(json, "p90") && (this.p90 = json.p90);
    _hasOwnProperty.call(json, "p99") && (this.p99 = json.p99);
    _hasOwnProperty.call(json, "p999") && (this.p999 = json.p999);
    _hasOwnProperty.call(json, "sendByte") && (this.sendByte = json.sendByte);
    _hasOwnProperty.call(json, "recvByte") && (this.recvByte = json.recvByte);
    _hasOwnProperty.call(json, "costMap") && (this.costMap.readFromObject(json.costMap));
    _hasOwnProperty.call(json, "retCodeMap") && (this.retCodeMap.readFromObject(json.retCodeMap));
    return this;
};
apitars.PerfTestDetail.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
apitars.PerfTestDetail.new = function () {
    return new apitars.PerfTestDetail();
};
apitars.PerfTestDetail.create = function (is) {
    return apitars.PerfTestDetail._readFrom(is);
};

apitars.CoreUsage = function() {
    this.percent = 0;
    this._classname = "apitars.CoreUsage";
};
apitars.CoreUsage._classname = "apitars.CoreUsage";
apitars.CoreUsage._write = function (os, tag, value) { os.writeStruct(tag, value); };
apitars.CoreUsage._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
apitars.CoreUsage._readFrom = function (is) {
    var tmp = new apitars.CoreUsage;
    tmp.percent = is.readFloat(0, true, 0);
    return tmp;
};
apitars.CoreUsage.prototype._writeTo = function (os) {
    os.writeFloat(0, this.percent);
};
apitars.CoreUsage.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
apitars.CoreUsage.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
apitars.CoreUsage.prototype.toObject = function() { 
    return {
        "percent" : this.percent
    };
};
apitars.CoreUsage.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "percent") && (this.percent = json.percent);
    return this;
};
apitars.CoreUsage.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
apitars.CoreUsage.new = function () {
    return new apitars.CoreUsage();
};
apitars.CoreUsage.create = function (is) {
    return apitars.CoreUsage._readFrom(is);
};

apitars.MemUsage = function() {
    this.total = 0;
    this.used = 0;
    this._classname = "apitars.MemUsage";
};
apitars.MemUsage._classname = "apitars.MemUsage";
apitars.MemUsage._write = function (os, tag, value) { os.writeStruct(tag, value); };
apitars.MemUsage._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
apitars.MemUsage._readFrom = function (is) {
    var tmp = new apitars.MemUsage;
    tmp.total = is.readInt64(0, true, 0);
    tmp.used = is.readInt64(1, true, 0);
    return tmp;
};
apitars.MemUsage.prototype._writeTo = function (os) {
    os.writeInt64(0, this.total);
    os.writeInt64(1, this.used);
};
apitars.MemUsage.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
apitars.MemUsage.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
apitars.MemUsage.prototype.toObject = function() { 
    return {
        "total" : this.total,
        "used" : this.used
    };
};
apitars.MemUsage.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "total") && (this.total = json.total);
    _hasOwnProperty.call(json, "used") && (this.used = json.used);
    return this;
};
apitars.MemUsage.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
apitars.MemUsage.new = function () {
    return new apitars.MemUsage();
};
apitars.MemUsage.create = function (is) {
    return apitars.MemUsage._readFrom(is);
};

apitars.PerfResDetail = function() {
    this.timestamp = 0;
    this.cpu = new TarsStream.List(apitars.CoreUsage);
    this.mem = new apitars.MemUsage;
    this._classname = "apitars.PerfResDetail";
};
apitars.PerfResDetail._classname = "apitars.PerfResDetail";
apitars.PerfResDetail._write = function (os, tag, value) { os.writeStruct(tag, value); };
apitars.PerfResDetail._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
apitars.PerfResDetail._readFrom = function (is) {
    var tmp = new apitars.PerfResDetail;
    tmp.timestamp = is.readUInt32(0, true, 0);
    tmp.cpu = is.readList(1, true, TarsStream.List(apitars.CoreUsage));
    tmp.mem = is.readStruct(2, true, apitars.MemUsage);
    return tmp;
};
apitars.PerfResDetail.prototype._writeTo = function (os) {
    os.writeUInt32(0, this.timestamp);
    os.writeList(1, this.cpu);
    os.writeStruct(2, this.mem);
};
apitars.PerfResDetail.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
apitars.PerfResDetail.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
apitars.PerfResDetail.prototype.toObject = function() { 
    return {
        "timestamp" : this.timestamp,
        "cpu" : this.cpu.toObject(),
        "mem" : this.mem.toObject()
    };
};
apitars.PerfResDetail.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "timestamp") && (this.timestamp = json.timestamp);
    _hasOwnProperty.call(json, "cpu") && (this.cpu.readFromObject(json.cpu));
    _hasOwnProperty.call(json, "mem") && (this.mem.readFromObject(json.mem));
    return this;
};
apitars.PerfResDetail.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
apitars.PerfResDetail.new = function () {
    return new apitars.PerfResDetail();
};
apitars.PerfResDetail.create = function (is) {
    return apitars.PerfResDetail._readFrom(is);
};

apitars.TestDetailResp = function() {
    this.code = 0;
    this.msg = "";
    this.perfDetail = new TarsStream.List(apitars.PerfTestDetail);
    this.resUsage = new TarsStream.List(apitars.PerfResDetail);
    this._classname = "apitars.TestDetailResp";
};
apitars.TestDetailResp._classname = "apitars.TestDetailResp";
apitars.TestDetailResp._write = function (os, tag, value) { os.writeStruct(tag, value); };
apitars.TestDetailResp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
apitars.TestDetailResp._readFrom = function (is) {
    var tmp = new apitars.TestDetailResp;
    tmp.code = is.readUInt32(0, true, 0);
    tmp.msg = is.readString(1, true, "");
    tmp.perfDetail = is.readList(2, true, TarsStream.List(apitars.PerfTestDetail));
    tmp.resUsage = is.readList(3, true, TarsStream.List(apitars.PerfResDetail));
    return tmp;
};
apitars.TestDetailResp.prototype._writeTo = function (os) {
    os.writeUInt32(0, this.code);
    os.writeString(1, this.msg);
    os.writeList(2, this.perfDetail);
    os.writeList(3, this.resUsage);
};
apitars.TestDetailResp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
apitars.TestDetailResp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
apitars.TestDetailResp.prototype.toObject = function() { 
    return {
        "code" : this.code,
        "msg" : this.msg,
        "perfDetail" : this.perfDetail.toObject(),
        "resUsage" : this.resUsage.toObject()
    };
};
apitars.TestDetailResp.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "code") && (this.code = json.code);
    _hasOwnProperty.call(json, "msg") && (this.msg = json.msg);
    _hasOwnProperty.call(json, "perfDetail") && (this.perfDetail.readFromObject(json.perfDetail));
    _hasOwnProperty.call(json, "resUsage") && (this.resUsage.readFromObject(json.resUsage));
    return this;
};
apitars.TestDetailResp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
apitars.TestDetailResp.new = function () {
    return new apitars.TestDetailResp();
};
apitars.TestDetailResp.create = function (is) {
    return apitars.TestDetailResp._readFrom(is);
};

apitars.QueryTestHistoryReq = function() {
    this.pageSize = 0;
    this.page = 0;
    this._classname = "apitars.QueryTestHistoryReq";
};
apitars.QueryTestHistoryReq._classname = "apitars.QueryTestHistoryReq";
apitars.QueryTestHistoryReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
apitars.QueryTestHistoryReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
apitars.QueryTestHistoryReq._readFrom = function (is) {
    var tmp = new apitars.QueryTestHistoryReq;
    tmp.pageSize = is.readUInt32(0, false, 0);
    tmp.page = is.readUInt32(1, false, 0);
    return tmp;
};
apitars.QueryTestHistoryReq.prototype._writeTo = function (os) {
    os.writeUInt32(0, this.pageSize);
    os.writeUInt32(1, this.page);
};
apitars.QueryTestHistoryReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
apitars.QueryTestHistoryReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
apitars.QueryTestHistoryReq.prototype.toObject = function() { 
    return {
        "pageSize" : this.pageSize,
        "page" : this.page
    };
};
apitars.QueryTestHistoryReq.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "pageSize") && (this.pageSize = json.pageSize);
    _hasOwnProperty.call(json, "page") && (this.page = json.page);
    return this;
};
apitars.QueryTestHistoryReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
apitars.QueryTestHistoryReq.new = function () {
    return new apitars.QueryTestHistoryReq();
};
apitars.QueryTestHistoryReq.create = function (is) {
    return apitars.QueryTestHistoryReq._readFrom(is);
};

apitars.TestHistory = function() {
    this.testID = 0;
    this.startTime = 0;
    this.endTime = 0;
    this.servType = "";
    this.lang = "";
    this.cores = 0;
    this.threads = 0;
    this.connCnt = 0;
    this.keepAlive = 0;
    this.reqFreq = 0;
    this.pkgLen = 0;
    this._classname = "apitars.TestHistory";
};
apitars.TestHistory._classname = "apitars.TestHistory";
apitars.TestHistory._write = function (os, tag, value) { os.writeStruct(tag, value); };
apitars.TestHistory._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
apitars.TestHistory._readFrom = function (is) {
    var tmp = new apitars.TestHistory;
    tmp.testID = is.readUInt32(0, true, 0);
    tmp.startTime = is.readUInt32(1, true, 0);
    tmp.endTime = is.readUInt32(2, true, 0);
    tmp.servType = is.readString(3, true, "");
    tmp.lang = is.readString(4, true, "");
    tmp.cores = is.readUInt32(5, true, 0);
    tmp.threads = is.readUInt32(6, true, 0);
    tmp.connCnt = is.readUInt32(7, true, 0);
    tmp.keepAlive = is.readUInt32(8, true, 0);
    tmp.reqFreq = is.readUInt32(9, true, 0);
    tmp.pkgLen = is.readUInt32(10, true, 0);
    return tmp;
};
apitars.TestHistory.prototype._writeTo = function (os) {
    os.writeUInt32(0, this.testID);
    os.writeUInt32(1, this.startTime);
    os.writeUInt32(2, this.endTime);
    os.writeString(3, this.servType);
    os.writeString(4, this.lang);
    os.writeUInt32(5, this.cores);
    os.writeUInt32(6, this.threads);
    os.writeUInt32(7, this.connCnt);
    os.writeUInt32(8, this.keepAlive);
    os.writeUInt32(9, this.reqFreq);
    os.writeUInt32(10, this.pkgLen);
};
apitars.TestHistory.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
apitars.TestHistory.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
apitars.TestHistory.prototype.toObject = function() { 
    return {
        "testID" : this.testID,
        "startTime" : this.startTime,
        "endTime" : this.endTime,
        "servType" : this.servType,
        "lang" : this.lang,
        "cores" : this.cores,
        "threads" : this.threads,
        "connCnt" : this.connCnt,
        "keepAlive" : this.keepAlive,
        "reqFreq" : this.reqFreq,
        "pkgLen" : this.pkgLen
    };
};
apitars.TestHistory.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "testID") && (this.testID = json.testID);
    _hasOwnProperty.call(json, "startTime") && (this.startTime = json.startTime);
    _hasOwnProperty.call(json, "endTime") && (this.endTime = json.endTime);
    _hasOwnProperty.call(json, "servType") && (this.servType = json.servType);
    _hasOwnProperty.call(json, "lang") && (this.lang = json.lang);
    _hasOwnProperty.call(json, "cores") && (this.cores = json.cores);
    _hasOwnProperty.call(json, "threads") && (this.threads = json.threads);
    _hasOwnProperty.call(json, "connCnt") && (this.connCnt = json.connCnt);
    _hasOwnProperty.call(json, "keepAlive") && (this.keepAlive = json.keepAlive);
    _hasOwnProperty.call(json, "reqFreq") && (this.reqFreq = json.reqFreq);
    _hasOwnProperty.call(json, "pkgLen") && (this.pkgLen = json.pkgLen);
    return this;
};
apitars.TestHistory.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
apitars.TestHistory.new = function () {
    return new apitars.TestHistory();
};
apitars.TestHistory.create = function (is) {
    return apitars.TestHistory._readFrom(is);
};

apitars.QueryTestHistoryResp = function() {
    this.code = 0;
    this.msg = "";
    this.total = 0;
    this.page = 0;
    this.histories = new TarsStream.List(apitars.TestHistory);
    this._classname = "apitars.QueryTestHistoryResp";
};
apitars.QueryTestHistoryResp._classname = "apitars.QueryTestHistoryResp";
apitars.QueryTestHistoryResp._write = function (os, tag, value) { os.writeStruct(tag, value); };
apitars.QueryTestHistoryResp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
apitars.QueryTestHistoryResp._readFrom = function (is) {
    var tmp = new apitars.QueryTestHistoryResp;
    tmp.code = is.readUInt32(0, true, 0);
    tmp.msg = is.readString(1, true, "");
    tmp.total = is.readUInt32(2, true, 0);
    tmp.page = is.readUInt32(3, true, 0);
    tmp.histories = is.readList(4, true, TarsStream.List(apitars.TestHistory));
    return tmp;
};
apitars.QueryTestHistoryResp.prototype._writeTo = function (os) {
    os.writeUInt32(0, this.code);
    os.writeString(1, this.msg);
    os.writeUInt32(2, this.total);
    os.writeUInt32(3, this.page);
    os.writeList(4, this.histories);
};
apitars.QueryTestHistoryResp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
apitars.QueryTestHistoryResp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
apitars.QueryTestHistoryResp.prototype.toObject = function() { 
    return {
        "code" : this.code,
        "msg" : this.msg,
        "total" : this.total,
        "page" : this.page,
        "histories" : this.histories.toObject()
    };
};
apitars.QueryTestHistoryResp.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "code") && (this.code = json.code);
    _hasOwnProperty.call(json, "msg") && (this.msg = json.msg);
    _hasOwnProperty.call(json, "total") && (this.total = json.total);
    _hasOwnProperty.call(json, "page") && (this.page = json.page);
    _hasOwnProperty.call(json, "histories") && (this.histories.readFromObject(json.histories));
    return this;
};
apitars.QueryTestHistoryResp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
apitars.QueryTestHistoryResp.new = function () {
    return new apitars.QueryTestHistoryResp();
};
apitars.QueryTestHistoryResp.create = function (is) {
    return apitars.QueryTestHistoryResp._readFrom(is);
};

var __apitars_api$doFuncTest$IF = {
    "name" : "doFuncTest",
    "return" : "apitars.FuncTestResp",
    "arguments" : []
};

var __apitars_api$doFuncTest$IE = function () {
    var os = new TarsStream.TarsOutputStream();
    return os.getBinBuffer();
};

var __apitars_api$doFuncTest$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readStruct(0, true, apitars.FuncTestResp)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __apitars_api$doFuncTest$PE = function (__$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    return tup;
};

var __apitars_api$doFuncTest$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readStruct("", apitars.FuncTestResp, new apitars.FuncTestResp)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __apitars_api$doFuncTest$ER = function (data) {
    throw _makeError(data, "Call api::doFuncTest failed");
};

apitars.apiProxy.prototype.doFuncTest = function () {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("doFuncTest", __apitars_api$doFuncTest$PE(version), arguments[arguments.length - 1], __apitars_api$doFuncTest$IF).then(__apitars_api$doFuncTest$PD, __apitars_api$doFuncTest$ER);
    } else {
        return this._worker.tars_invoke("doFuncTest", __apitars_api$doFuncTest$IE(), arguments[arguments.length - 1], __apitars_api$doFuncTest$IF).then(__apitars_api$doFuncTest$ID, __apitars_api$doFuncTest$ER);
    }
};
apitars.apiProxy.doFuncTest = __apitars_api$doFuncTest$IF;

var __apitars_api$doPerfTest$IF = {
    "name" : "doPerfTest",
    "return" : "apitars.PerfTestResp",
    "arguments" : [{
        "name" : "req",
        "class" : "apitars.PerfTestReq",
        "direction" : "in"
    }]
};

var __apitars_api$doPerfTest$IE = function (req) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, req);
    return os.getBinBuffer();
};

var __apitars_api$doPerfTest$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readStruct(0, true, apitars.PerfTestResp)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __apitars_api$doPerfTest$PE = function (req, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("req", req);
    return tup;
};

var __apitars_api$doPerfTest$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readStruct("", apitars.PerfTestResp, new apitars.PerfTestResp)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __apitars_api$doPerfTest$ER = function (data) {
    throw _makeError(data, "Call api::doPerfTest failed");
};

apitars.apiProxy.prototype.doPerfTest = function (req) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("doPerfTest", __apitars_api$doPerfTest$PE(req, version), arguments[arguments.length - 1], __apitars_api$doPerfTest$IF).then(__apitars_api$doPerfTest$PD, __apitars_api$doPerfTest$ER);
    } else {
        return this._worker.tars_invoke("doPerfTest", __apitars_api$doPerfTest$IE(req), arguments[arguments.length - 1], __apitars_api$doPerfTest$IF).then(__apitars_api$doPerfTest$ID, __apitars_api$doPerfTest$ER);
    }
};
apitars.apiProxy.doPerfTest = __apitars_api$doPerfTest$IF;

var __apitars_api$getTestDetail$IF = {
    "name" : "getTestDetail",
    "return" : "apitars.TestDetailResp",
    "arguments" : [{
        "name" : "testID",
        "class" : "int64",
        "direction" : "in"
    }, {
        "name" : "timestamp",
        "class" : "int64",
        "direction" : "in"
    }]
};

var __apitars_api$getTestDetail$IE = function (testID, timestamp) {
    var os = new TarsStream.TarsOutputStream();
    os.writeUInt32(1, testID);
    os.writeUInt32(2, timestamp);
    return os.getBinBuffer();
};

var __apitars_api$getTestDetail$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readStruct(0, true, apitars.TestDetailResp)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __apitars_api$getTestDetail$PE = function (testID, timestamp, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeUInt32("testID", testID);
    tup.writeUInt32("timestamp", timestamp);
    return tup;
};

var __apitars_api$getTestDetail$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readStruct("", apitars.TestDetailResp, new apitars.TestDetailResp)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __apitars_api$getTestDetail$ER = function (data) {
    throw _makeError(data, "Call api::getTestDetail failed");
};

apitars.apiProxy.prototype.getTestDetail = function (testID, timestamp) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getTestDetail", __apitars_api$getTestDetail$PE(testID, timestamp, version), arguments[arguments.length - 1], __apitars_api$getTestDetail$IF).then(__apitars_api$getTestDetail$PD, __apitars_api$getTestDetail$ER);
    } else {
        return this._worker.tars_invoke("getTestDetail", __apitars_api$getTestDetail$IE(testID, timestamp), arguments[arguments.length - 1], __apitars_api$getTestDetail$IF).then(__apitars_api$getTestDetail$ID, __apitars_api$getTestDetail$ER);
    }
};
apitars.apiProxy.getTestDetail = __apitars_api$getTestDetail$IF;

var __apitars_api$getTestHistories$IF = {
    "name" : "getTestHistories",
    "return" : "apitars.QueryTestHistoryResp",
    "arguments" : [{
        "name" : "req",
        "class" : "apitars.QueryTestHistoryReq",
        "direction" : "in"
    }]
};

var __apitars_api$getTestHistories$IE = function (req) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, req);
    return os.getBinBuffer();
};

var __apitars_api$getTestHistories$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readStruct(0, true, apitars.QueryTestHistoryResp)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __apitars_api$getTestHistories$PE = function (req, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("req", req);
    return tup;
};

var __apitars_api$getTestHistories$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readStruct("", apitars.QueryTestHistoryResp, new apitars.QueryTestHistoryResp)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __apitars_api$getTestHistories$ER = function (data) {
    throw _makeError(data, "Call api::getTestHistories failed");
};

apitars.apiProxy.prototype.getTestHistories = function (req) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("getTestHistories", __apitars_api$getTestHistories$PE(req, version), arguments[arguments.length - 1], __apitars_api$getTestHistories$IF).then(__apitars_api$getTestHistories$PD, __apitars_api$getTestHistories$ER);
    } else {
        return this._worker.tars_invoke("getTestHistories", __apitars_api$getTestHistories$IE(req), arguments[arguments.length - 1], __apitars_api$getTestHistories$IF).then(__apitars_api$getTestHistories$ID, __apitars_api$getTestHistories$ER);
    }
};
apitars.apiProxy.getTestHistories = __apitars_api$getTestHistories$IF;



